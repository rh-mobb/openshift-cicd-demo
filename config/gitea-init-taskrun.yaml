apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gitea-
spec:
  taskSpec:
    params:
    - name: GITEA_USER
      type: string
      description: Gitea admin username
      default: gitea
    - name: GITEA_PASSWORD
      type: string
      description: Gitea admin password
      default: openshift
    - name: GITEA_REPO
      type: string
      description: repo to clone
      default: https://github.com/rh-mobb/openshift-cicd-demo-spring-petclinic.git
    - name: GITEA_CONFIG_REPO
      type: string
      description: repo to clone
      default: https://github.com/rh-mobb/openshift-cicd-demo-spring-petclinic-config.git
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: init-gitea
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3

          import os
          import requests

          gitea_user = "$(params.GITEA_USER)"
          gitea_pwd = "$(params.GITEA_PASSWORD)"
          gitea_repo = "$(params.GITEA_REPO)"
          gitea_config_repo = "$(params.GITEA_CONFIG_REPO)"
          webhookURL = "http://" + os.popen('oc get route el-webhook -o template --template="{{.spec.host}}"').read()
          giteaURL = "http://" + os.popen('oc get svc gitea -o template --template="{{.spec.clusterIP}}"').read() + ":3000"

          # create admin user
          data_user = {
          'user_name': gitea_user,
          'password': gitea_pwd,
          'retype': gitea_pwd,
          'email': 'admin@gitea.com'
          }

          resp = requests.post(url = giteaURL + "/user/sign_up", data = data_user)

          if resp.status_code != 200:
            print("Error creating Gogs admin (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created admin user {}:{}".format(gitea_user, gitea_pwd))

          # create git repo spring-petclinic
          data_repo = '{"clone_addr": "' + gitea_repo + '", "uid": 1, "repo_name": "spring-petclinic"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/migrate", headers = headers, auth = (gitea_user, gitea_pwd), data = data_repo)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo spring-petclinic")

          # configure webhook on spring-petclinic
          data_webhook = '{"type": "gitea", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/" + gitea_user + "/spring-petclinic/hooks",
                              headers = headers,
                              auth = (gitea_user, gitea_pwd),
                              data = data_webhook)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error configuring the webhook (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Configured webhook: " + webhookURL)

          # create git repo spring-petclinic-config
          data_repo = '{"clone_addr": "' + gitea_config_repo + '", "uid": 1, "repo_name": "spring-petclinic-config"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/migrate", headers = headers, auth = (gitea_user, gitea_pwd), data = data_repo)

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo spring-petclinic-config")
